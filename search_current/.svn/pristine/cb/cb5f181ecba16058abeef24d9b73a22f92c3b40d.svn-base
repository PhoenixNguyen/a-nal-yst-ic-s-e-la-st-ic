package vn.onepay.search.client;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;
import org.apache.commons.httpclient.NameValuePair;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.params.HttpConnectionManagerParams;
import org.apache.commons.httpclient.util.EncodingUtil;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;

public class SearchIndexThread extends Thread {
	private final static Logger logger = Logger.getLogger(SearchClient.class);
	private static MultiThreadedHttpConnectionManager connectionManager;
	private static HttpClient client;
	static {

		if (connectionManager == null) {
			connectionManager = new MultiThreadedHttpConnectionManager();
			HttpConnectionManagerParams params = new HttpConnectionManagerParams();
			params.setDefaultMaxConnectionsPerHost(200);
			params.setMaxTotalConnections(5000);
			params.setParameter(HttpConnectionManagerParams.SO_TIMEOUT, 10000);
			params.setParameter(HttpConnectionManagerParams.CONNECTION_TIMEOUT,
					10000);
			connectionManager.setParams(params);
		}
		if (client == null)
			client = new HttpClient(connectionManager);
	}
	private String endPoint;
	private Map<String, String> mParams;

	public SearchIndexThread(String endPoint, Map<String, String> mParams) {
		this.endPoint = endPoint;
		this.mParams = mParams;
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		try {
			indexSearch(this.endPoint, mParams);
		} catch (Exception e) {
//			e.printStackTrace();
		}
	}
	
	private String indexSearch(final String url, Map<String, String> mParams) throws IOException {
		String requestUrl = null;
		String response = null;
		PostMethod method = new PostMethod(url);
		try {
			method.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
			List<NameValuePair> params = new ArrayList<NameValuePair>(1);
			for (Entry<String, String> entry : mParams.entrySet()) {
				String paramName = entry.getKey();
				String paramValue = entry.getValue();
				params.add(new NameValuePair(paramName, paramValue));
			}
			method.setRequestBody(params.toArray(new NameValuePair[params.size()]));
			// ----------
			requestUrl = method.getURI() + "?" + EncodingUtil.formUrlEncode(params.toArray(new NameValuePair[0]), "UTF-8");
			// ----------
			int returnCode = client.executeMethod(method);
			if (returnCode == HttpStatus.SC_NOT_IMPLEMENTED) {
				logger.error("The Post method is not implemented by this URI "+requestUrl);
			} else {
				response = StringUtils.trimToEmpty(new String(method.getResponseBody(), "UTF-8"));
				logger.info(String.format("%s\nSearchAPIResponse[%s]", requestUrl, response));
			}
		} catch (IOException e) {
			logger.error(requestUrl+"\nSearchAPIResponse Exception", e);
			throw e;
		} finally {
			method.releaseConnection();
		}
		return response;
	}
}
