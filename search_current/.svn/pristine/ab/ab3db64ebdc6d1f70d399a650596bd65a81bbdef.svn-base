package vn.onepay.analytic.crons;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;

import vn.onepay.analytic.dao.CdrFilterDAO;
import vn.onepay.analytic.model.MsisdnStatistic;
import vn.onepay.cache.dynacache.PassiveDynaCache;
import vn.onepay.cache.dynacache.common.CacheConstants;
import vn.onepay.common.SharedConstants;
import vn.onepay.iac.model.IacCdr;
import vn.onepay.search.entities.ESSmsCdrFilter;
import vn.onepay.search.service.ElasticSearchService;
import vn.onepay.sms.model.SmsCdr;
import vn.onepay.utils.Utils;

public class CdrFilterScheduler {
	private final static Logger logger = Logger.getLogger(CdrFilterScheduler.class);
	private PassiveDynaCache passiveDynaCache;
	private CdrFilterDAO cdrFilterDAO;
	private ElasticSearchService elasticSearchService;

	public void setPassiveDynaCache(PassiveDynaCache passiveDynaCache) {
		this.passiveDynaCache = passiveDynaCache;
	}

	public void setCdrFilterDAO(CdrFilterDAO cdrFilterDAO) {
		this.cdrFilterDAO = cdrFilterDAO;
	}

	public void setElasticSearchService(ElasticSearchService elasticSearchService) {
		this.elasticSearchService = elasticSearchService;
	}

	private static DateFormat dtFormat = new SimpleDateFormat("yyyyMMdd");
	private String[] chargingServices = new String[] { SharedConstants.SMS_CHARGING_SERVICE_CODE, SharedConstants.IAC_CHARGING_SERVICE_CODE };

	public static boolean	blnFilterProcessing	= false;
	public synchronized void scan() {
		if (blnFilterProcessing)
			return;
		blnFilterProcessing = true;
		
		Calendar calendar = Calendar.getInstance();
		final Date toTime = calendar.getTime();
		calendar.add(Calendar.MINUTE, -5);
		final Date fromTime = calendar.getTime();
		try{
			final int count = 3;
			final double amount = 3000;
	
			for (String chargingService : chargingServices) {
				String mapKey = dtFormat.format(toTime) + "_" + chargingService;
				Map<String, Set<String>> mapProviderMsisdn = (Map<String, Set<String>>) passiveDynaCache.getCachedItem(mapKey);
				if(mapProviderMsisdn==null)
					mapProviderMsisdn = new HashMap<String, Set<String>>();
				List<MsisdnStatistic> msisdnStatistics = cdrFilterDAO.mapReduce(SharedConstants.SMS_CHARGING_SERVICE_CODE.equalsIgnoreCase(chargingService) ? SmsCdr.class : IacCdr.class, fromTime,
						toTime, count, amount);
				if (msisdnStatistics != null && msisdnStatistics.size() > 0) {
					for (MsisdnStatistic statistic : msisdnStatistics) {
						Set<String> dsMsisdn = mapProviderMsisdn.containsKey(statistic.getProvider()) ? mapProviderMsisdn.get(statistic.getProvider())
								: new HashSet<String>();
						dsMsisdn.add(statistic.getMsisdn());
						mapProviderMsisdn.put(statistic.getProvider(), dsMsisdn);
					}
				}
				passiveDynaCache.setCachedItem(mapKey, mapProviderMsisdn, CacheConstants.MEMCACHED_TIMEOUT_24_HOURS);
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		
		blnFilterProcessing = false;
	}

	public static boolean	blnProcessing	= false;
	public synchronized void run() {
		if (blnProcessing)
			return;
		blnProcessing = true;
		
		Calendar calendar = Calendar.getInstance();
		final Date toTime = calendar.getTime();
		final Date fromTime = Utils.getStartOfDay(toTime);
		
		final int offset = 0;
		final int limit = 0;
		
		try{
			for (String chargingService : chargingServices) {
				String mapKey = dtFormat.format(toTime) + "_" + chargingService;
				Map<String, Set<String>> mapProviderMsisdn = (Map<String, Set<String>>) passiveDynaCache.getCachedItem(mapKey);
				if (mapProviderMsisdn != null && mapProviderMsisdn.size() > 0) {
					for (String provider : mapProviderMsisdn.keySet()) {
						Set<String> dsMsisdn = mapProviderMsisdn.get(provider);
						List<ESSmsCdrFilter> esSmsCdrFilters = cdrFilterDAO.findESSmsCdrFilters(chargingService, provider, new ArrayList<String>(dsMsisdn),
								fromTime, toTime, offset, limit);
						if (esSmsCdrFilters != null && esSmsCdrFilters.size() > 0) {
							for (ESSmsCdrFilter esSmsCdrFilter : esSmsCdrFilters) {
								if(passiveDynaCache.containsKey(esSmsCdrFilter.getId()))
									continue;
								try {
									if (elasticSearchService.checkIndex(ESSmsCdrFilter.class)) {
										if (!elasticSearchService.exist(esSmsCdrFilter.getId(), ESSmsCdrFilter.class)) {
											if (StringUtils.isNotEmpty(elasticSearchService.index(esSmsCdrFilter.getId(), esSmsCdrFilter))){
												if("mw_9029".equalsIgnoreCase(esSmsCdrFilter.getProvider()))
													logger.info("FUCK|"+esSmsCdrFilter.getProvider() +"|" + esSmsCdrFilter.getMerchant() + "|" +esSmsCdrFilter.getMsisdn()+"|"+esSmsCdrFilter.getShort_code()+"|"+esSmsCdrFilter.getCommand_code());
												logger.info("indexed");
											}
										} else {
											logger.info("existed");
										}
										passiveDynaCache.setCachedItem(esSmsCdrFilter.getId(), esSmsCdrFilter.getId() , CacheConstants.MEMCACHED_TIMEOUT_24_HOURS);
									} else {
										elasticSearchService.createIndex(ESSmsCdrFilter.class);
									}
								} catch (Exception e) {
									e.printStackTrace();
								}
								try{TimeUnit.MILLISECONDS.sleep(200);}catch(InterruptedException ie){}
							}
						}
					}
				}
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		blnProcessing = false;
	}

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
